#### QUESTIONS

1. How do you import a module?

A:  You can manually add the module as a dependency to the package.json, then run npm install
OR
run npm install ./path/to/module/folder --save

2. What JavaScript statement do you use to export a module?

A: module.exports.exportedModule = exportedModule;
OR by using the exports shortcut
exports.exportedModule = exportedModule;

#### ONLINE RESEARCH QUESTIONS

1. Are there other ways to export a module?

A: I can't find any other way to export a module besides the previously mentioned.

2. What are ES6 modules and how do they differ from the module we created in this checkpoint?

A:  ES6 modules are stored in files and are based on the same idea as other module formats.  Javascript has had modules for awhile but not until ES6 were they built-in.  The modules used in Node.js follow module specification called CommonJS specification.  They are defined dynamically while being evaluated and imported using require.

ES6 differs by having exports being defined lexically when the code is being parsed and imported using import.

#### CODE CHALLENGE

Create a Github repository called Terminal Command and add the code from this checkpoint. Implement the touch and mkdir commands to the terminal-commands module:

const fs = require('fs');
const filename = 'newTextFile.txt';
const directory = './path/';

module.exports.ls = () => {
  fs.readdir('./', (err, files) => {
    const filesToString = files.reduce((acc, file) => {
      return `${acc} ${file} `;
    }, '');
    console.log(filesToString);
  });
};

module.exports.touch = () => {
  fs.closeSync(fs.openSync(filename, 'a'));
};

module.exports.mkdir = () => {
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory);
    console.log('Directory created');
  } else {
    console.log('Directory already exists!')
  }
};
